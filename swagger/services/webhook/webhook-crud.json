{
  "basePath": "/v1",
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "Code": {
      "example": "a0302b84-8635-4ea6-9be3-ec48be12a15b",
      "type": "string"
    },
    "ErrorList": {
      "items": {
        "$ref": "#/definitions/ErrorListObject"
      },
      "type": "array"
    },
    "ErrorListObject": {
      "properties": {
        "code": {
          "example": 400,
          "type": "number"
        },
        "entity": {
          "example": "planet",
          "type": "string"
        },
        "entityId": {
          "example": "pluto",
          "type": "string"
        },
        "entityIndex": {
          "example": 1,
          "type": "number"
        },
        "reason": {
          "example": "Planet pluto was not found (did you mean dwarf planet pluto?)",
          "type": "string"
        },
        "subentityPath": {
          "items": {
            "type": [
              "number",
              "string"
            ]
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Event": {
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "string"
        }
      },
      "required": [
        "code"
      ],
      "type": "object"
    },
    "Ids": {
      "items": {
        "example": "a0302b84-8635-4ea6-9be3-ec48be12a15b",
        "type": "string"
      },
      "type": "array"
    },
    "NotFoundError": {
      "properties": {
        "code": {
          "example": "NotFound",
          "type": "string"
        },
        "message": {
          "example": "Merchant not found",
          "type": "string"
        }
      },
      "required": [
        "message",
        "code"
      ],
      "type": "object"
    },
    "ValidationError": {
      "properties": {
        "code": {
          "type": "string"
        },
        "error": {
          "properties": {
            "code": {
              "description": "machine readable error code",
              "enum": [
                "SCHEMA_VALIDATION_FAILED",
                "ENUM_MISMATCH",
                "MAXIMUM",
                "MAXIMUM_EXCLUSIVE",
                "MINIMUM",
                "MINIMUM_EXCLUSIVE",
                "MULTIPLE_OF",
                "ARRAY_LENGTH_LONG",
                "ARRAY_LENGTH_SHORT",
                "ARRAY_ADDITIONAL_ITEMS",
                "ARRAY_UNIQUE",
                "MAX_LENGTH",
                "MIN_LENGTH",
                "MAX_PROPERTIES",
                "MIN_PROPERTIES",
                "OBJECT_MISSING_REQUIRED_PROPERTY",
                "OBJECT_PROPERTIES_MAXIMUM",
                "OBJECT_PROPERTIES_MINIMUM",
                "OBJECT_ADDITIONAL_PROPERTIES",
                "OBJECT_DEPENDENCY_KEY",
                "ONE_OF_MISSING",
                "ONE_OF_MULTIPLE",
                "NOT_PASSED",
                "INVALID_FORMAT",
                "UNKNOWN_FORMAT",
                "PATTERN"
              ],
              "type": "string"
            },
            "message": {
              "description": "human readable error code",
              "type": "string"
            },
            "paramName": {
              "description": "the parameter-field, that failed to validate, like \"userId\"",
              "type": "string"
            },
            "paramValue": {
              "description": "the value, that was sent, like \"xxx\""
            },
            "results": {
              "properties": {
                "errors": {
                  "items": {
                    "$ref": "#/definitions/ValidationErrorResult"
                  },
                  "type": "array"
                },
                "warnings": {
                  "items": {
                    "$ref": "#/definitions/ValidationErrorResult"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "message"
          ],
          "type": "object"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidationErrorResult": {
      "properties": {
        "code": {
          "description": "machine readable error code",
          "enum": [
            "ENUM_MISMATCH",
            "MAXIMUM",
            "MAXIMUM_EXCLUSIVE",
            "MINIMUM",
            "MINIMUM_EXCLUSIVE",
            "MULTIPLE_OF",
            "ARRAY_LENGTH_LONG",
            "ARRAY_LENGTH_SHORT",
            "ARRAY_ADDITIONAL_ITEMS",
            "ARRAY_UNIQUE",
            "MAX_LENGTH",
            "MIN_LENGTH",
            "MAX_PROPERTIES",
            "MIN_PROPERTIES",
            "OBJECT_MISSING_REQUIRED_PROPERTY",
            "OBJECT_PROPERTIES_MAXIMUM",
            "OBJECT_PROPERTIES_MINIMUM",
            "OBJECT_ADDITIONAL_PROPERTIES",
            "OBJECT_DEPENDENCY_KEY",
            "ONE_OF_MISSING",
            "ONE_OF_MULTIPLE",
            "NOT_PASSED",
            "INVALID_FORMAT",
            "UNKNOWN_FORMAT",
            "PATTERN"
          ],
          "type": "string"
        },
        "description": {
          "example": "human readable error code",
          "type": "string"
        },
        "message": {
          "description": "human readable error code",
          "type": "string"
        },
        "path": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "WebhookCreate": {
      "additionalProperties": false,
      "properties": {
        "active": {
          "type": "boolean"
        },
        "code": {
          "example": "string",
          "maxLength": 255,
          "type": [
            "string",
            "null"
          ]
        },
        "endpoint": {
          "maxLength": 255,
          "type": "string"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/Event"
          },
          "type": "array"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "active",
        "events",
        "name"
      ],
      "type": "object"
    },
    "WebhookFull": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "code": {
          "description": "Human readable code of the entity",
          "example": "someCode",
          "maxLength": 255,
          "type": "string"
        },
        "endpoint": {
          "maxLength": 255,
          "type": "string"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/Event"
          },
          "type": "array"
        },
        "id": {
          "maxLength": 36,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "type": "object"
    },
    "WebhookResponse": {
      "properties": {
        "body": {
          "description": "Webhook response body",
          "example": {
            "test": true
          },
          "type": "object"
        },
        "error": {
          "description": "Webhook response error",
          "example": {
            "test": true
          },
          "type": "object"
        },
        "statusCode": {
          "description": "Webhook response status code",
          "example": 200,
          "type": "number"
        }
      },
      "type": "object"
    },
    "WebhookUpdate": {
      "additionalProperties": false,
      "properties": {
        "active": {
          "type": "boolean"
        },
        "endpoint": {
          "maxLength": 255,
          "type": "string"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/Event"
          },
          "type": "array"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "webhook.shopgate.io",
  "info": {
    "contact": {
      "email": "mail@retail.red",
      "name": "retail.red API",
      "url": "https://retail.red"
    },
    "description": "Check out the [Webhook Integration Guide](/guides/integrations/webhook-integration/overview) or start with [creating a webhook](/api-reference/webhook-api/webhooks/createwebhooks).\n",
    "title": "Webhook Service",
    "version": "1.0"
  },
  "parameters": {
    "EventCode": {
      "in": "path",
      "maxLength": 255,
      "name": "eventCode",
      "required": true,
      "type": "string"
    },
    "MerchantCode": {
      "in": "path",
      "maxLength": 255,
      "name": "merchantCode",
      "required": true,
      "type": "string"
    },
    "Webhook": {
      "in": "body",
      "name": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/WebhookFull"
      }
    },
    "WebhookCreate": {
      "description": "The following event codes are supported: <ul> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#cartremindertimereached\">cartReminderTimeReached</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#customerdeleted\">customerDeleted</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#fulfillmentorderadded\">fulfillmentOrderAdded</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#fulfillmentorderstatusupdated\">fulfillmentOrderStatusUpdated</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#fulfillmentorderupdated\">fulfillmentOrderUpdated</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#importcompleted\">importCompleted</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#inventoryreservationdeleted\">inventoryReservationDeleted</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#inventoryreservationsettled\">inventoryReservationSettled</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#locationcreated\">locationCreated</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#locationdeleted\">locationDeleted</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#locationupdated\">locationUpdated</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#notificationsettingschanged\">notificationSettingsChanged</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#ordernotpickedup\">orderNotPickedUp</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#productcreated\">productCreated</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#productupdated\">productUpdated</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#salesorderadded\">salesOrderAdded</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#salesorderfulfillmentadded\">salesOrderFulfillmentAdded</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#salesorderstatusupdated\">salesOrderStatusUpdated</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#schedulepicktimereached\">schedulePickTimeReached</a></li> <li><a href=\"/guides/integrations/webhook-integration/available-webhooks#schedulepickupremindertimereached\">schedulePickupReminderTimeReached</a></li> </ul>",
      "in": "body",
      "name": "body",
      "required": true,
      "schema": {
        "properties": {
          "webhooks": {
            "items": {
              "$ref": "#/definitions/WebhookCreate"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "webhooks"
        ],
        "type": "object"
      },
      "x-examples": {
        "createWebhooks": {
          "webhooks": [
            {
              "active": true,
              "code": "salesOrderAddedMagento",
              "endpoint": "https://your-service.url",
              "events": [
                {
                  "code": "salesOrderAdded"
                }
              ],
              "name": "salesOrderAdded Magento"
            }
          ]
        }
      }
    },
    "WebhookId": {
      "in": "path",
      "maxLength": 255,
      "name": "webhookId",
      "required": true,
      "type": "string"
    },
    "WebhookUpdate": {
      "in": "body",
      "name": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/WebhookUpdate"
      },
      "x-examples": {
        "updateWebhook": {
          "active": true,
          "endpoint": "https://your-service.url",
          "events": [
            {
              "code": "salesOrderAdded"
            }
          ],
          "name": "salesOrderAdded Magento"
        }
      }
    }
  },
  "paths": {
    "/merchants/{merchantCode}/webhookToken": {
      "get": {
        "description": "Get webhook token",
        "operationId": "getWebhookToken",
        "parameters": [
          {
            "$ref": "#/parameters/MerchantCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns webhook token",
            "examples": {
              "getWebhookToken": {
                "webhookToken": "ajkJKSDLASfjk2N340jwfdsONlnvmylKLOJOFBjdslbL0in"
              }
            },
            "schema": {
              "properties": {
                "webhookToken": {
                  "example": "ajkJKSDLASfjk2N340jwfdsONlnvmylKLOJOFBjdslbL0in",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "Merchant not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        },
        "summary": "Get webhook token",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/merchants/{merchantCode}/webhooks": {
      "get": {
        "description": "Get webhooks",
        "operationId": "getWebhooks",
        "parameters": [
          {
            "$ref": "#/parameters/MerchantCode"
          },
          {
            "description": "Allowed filter is `code`",
            "in": "query",
            "name": "filters",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns webhooks",
            "examples": {
              "getWebhooks": {
                "webhooks": [
                  {
                    "active": true,
                    "code": "salesOrderAddedMagento",
                    "endpoint": "https://your-service.url",
                    "events": [
                      {
                        "code": "salesOrderAdded"
                      }
                    ],
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "name": "salesOrderAdded Magento"
                  }
                ]
              }
            },
            "schema": {
              "properties": {
                "webhooks": {
                  "items": {
                    "$ref": "#/definitions/WebhookFull"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "Merchant not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        },
        "summary": "Get webhooks",
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "description": "Register new webhooks",
        "operationId": "createWebhooks",
        "parameters": [
          {
            "$ref": "#/parameters/MerchantCode"
          },
          {
            "$ref": "#/parameters/WebhookCreate"
          }
        ],
        "responses": {
          "200": {
            "description": "Invalid request",
            "examples": {
              "createWebhooks": {
                "errors": [
                  {
                    "code": 409,
                    "entity": "webhook",
                    "entityId": "salesOrderAddedMagento",
                    "entityIndex": 0,
                    "reason": "Webhook with code 'salesOrderAddedMagento' already exists",
                    "subentityPath": []
                  }
                ],
                "ids": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              }
            },
            "schema": {
              "properties": {
                "errors": {
                  "$ref": "#/definitions/ErrorList"
                },
                "ids": {
                  "$ref": "#/definitions/Ids"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "Merchant not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        },
        "summary": "Create webhooks",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/merchants/{merchantCode}/webhooks/{webhookId}": {
      "delete": {
        "description": "Delete webhook",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "$ref": "#/parameters/MerchantCode"
          },
          {
            "$ref": "#/parameters/WebhookId"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "Merchant or Webhook not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        },
        "summary": "Delete webhook",
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "description": "Update webhook",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "$ref": "#/parameters/MerchantCode"
          },
          {
            "$ref": "#/parameters/WebhookId"
          },
          {
            "$ref": "#/parameters/WebhookUpdate"
          }
        ],
        "responses": {
          "204": {
            "description": "Update successful"
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "Merchant or Webhook not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        },
        "summary": "Update webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/merchants/{merchantCode}/webhooks/{webhookId}/test": {
      "post": {
        "description": "Trigger example webhook event. The `body` property gets filled with the response body of the external service. The `error` property gets filled with the response body of the external service in case an error occured.",
        "operationId": "triggerWebhook",
        "parameters": [
          {
            "$ref": "#/parameters/MerchantCode"
          },
          {
            "$ref": "#/parameters/WebhookId"
          }
        ],
        "responses": {
          "200": {
            "description": "Trigger successful",
            "examples": {
              "triggerWebhook": {
                "body": {
                  "test": true
                },
                "error": {
                  "test": true
                },
                "statusCode": 200
              }
            },
            "schema": {
              "$ref": "#/definitions/WebhookResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "Merchant or Event not found"
          }
        },
        "summary": "Test webhook",
        "tags": [
          "Webhooks"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0"
}