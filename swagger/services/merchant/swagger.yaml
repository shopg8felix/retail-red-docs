swagger: '2.0'
info:
  title: Merchant Service
  description: Merchant Service
  version: '2.0'
basePath: /v1
produces:
  - application/json
consumes:
  - application/json
paths:
  /merchants:
    get:
      parameters:
        - in: query
          name: filters
          description: Filter to filter entities by code or id
          format: json
          type: string
        - in: query
          name: fields
          description: "Additional fields to include to the response. Available fields: settings, externalServiceSettings"
          format: csv
          type: string
        - in: query
          name: includeInternalIds
          description: Internal parameter to allow merchant id to be included.
          type: boolean
        - $ref: '#/parameters/PaginationLimit'
        - $ref: '#/parameters/PaginationOffset'
      responses:
        200:
          description: Returns merchants.
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Pagination'
              merchants:
                type: array
                items:
                  allOf:
                    - $ref: '#/definitions/Merchant'
                    - type: object
                      properties:
                        settings:
                          description: Available when settings is included in fields query parameter.
                          $ref: '#/definitions/MerchantSettings'
                        externalServiceSettings:
                          description: Available when externalServiceSettings is included in fields query parameter.
                          $ref: '#/definitions/ExternalServiceSettings'
        400:
          description: Bad request (mostly missing or invalid parameters/values).
          schema:
            $ref: '#/definitions/ValidationErrors'
        401:
          description: The client or user is not authenticated.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The authenticated client or user is not allowed to call this method.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /merchants/{merchantCode}:
    parameters:
      - $ref: '#/parameters/MerchantCode'
    post:
      tags:
        - Internal
      description: Update a merchant's properties
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/PostMerchant'
      responses:
        204:
          description: 'Merchant updated'
        404:
          description: 'Merchant not found'
        default:
          description: 'Unexpected error'
          schema:
            $ref: '#/definitions/Error'
  /merchants/{merchantCode}/id:
    parameters:
      - $ref: '#/parameters/MerchantCode'
    get:
      tags:
        - Internal
      responses:
        200:
          description: Returns id for a given merchant code.
          schema:
            type: object
            properties:
              id:
                description: ID of the Merchant.
                type: string
                format: uuid
                example: "40260c82-3a17-4190-b002-ea0fa48747da"
        404:
          description: Merchant not found
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /merchants/{merchantCode}/engageShops:
    parameters:
      - $ref: '#/parameters/MerchantCode'
    get:
      responses:
        200:
          description: Returns engage shop numbers associated with given merchant code.
          schema:
            type: object
            properties:
              engageShops:
                description: ID of the Merchant.
                type: array
                items:
                  type: string
                  example: 30794
        404:
          description: Merchant not found.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /merchants/{merchantCode}/siBranding:
    parameters:
      - $ref: '#/parameters/MerchantCode'
    get:
      responses:
        200:
          description: Returns SI branding for a given merchant code.
          schema:
            type: object
            properties:
              siBranding:
                type: object
                properties:
                  merchantPartnerId:
                    description: Id of this dataset.
                    type: string
                    example: d0130354-d8b1-4775-813c-4af761523c4d
                  partnerName:
                    description: Partner name
                    type: string
                    example: Awesome Agency
                  partnerUrl:
                    description: Url to the website of the partner.
                    type: string
                    example: https://awesomeAgency.com
                  partnerLogo:
                    description: Phone number of the agency.
                    type: string
                    example: https://awesomeAgency.com/logo.png
                  partnerPhone:
                    description: Phone number of the agency.
                    type: string
                    example: "+18001235678"
        404:
          description: Merchant not found.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /merchants/{merchantCode}/settings:
    parameters:
      - $ref: '#/parameters/MerchantCode'
    post:
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - settings
            properties:
              settings:
                $ref: '#/definitions/MerchantSettings'
      responses:
        '204':
          description: Set merchant settings.
    get:
      parameters:
        - in: query
          name: filters
          description: Filter to filter settings by key
          format: json
          type: string
      responses:
        200:
          description: Returns value for a given merchant code and setting key.
          schema:
            type: object
            properties:
              settings:
                $ref: '#/definitions/MerchantSettings'
        404:
          description: Merchant not found.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /merchants/{merchantCode}/settings/{key}:
    parameters:
      - $ref: '#/parameters/MerchantCode'
      - name: key
        in: path
        type: string
        required: true
        description: The key of the setting to be retrieved, e.g. "DefaultLocale".
    get:
      responses:
        200:
          description: Returns value for a given merchant code and setting key.
          schema:
            type: object
            properties:
              setting:
                description: The setting's value, e.g. a locale code for key "DefaultLocale".
                type: string
                example: "en-us"
        404:
          description: Merchant not found.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /merchants/{merchantCode}/externalServiceSettings:
    parameters:
      - $ref: '#/parameters/MerchantCode'
    post:
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - externalServiceSettings
            properties:
              externalServiceSettings:
                $ref: '#/definitions/ExternalServiceSettings'
      responses:
        204:
          description: Set merchant settings.
    get:
      parameters:
        - in: query
          name: filters
          description: Filter to filter settings by key
          format: json
          type: string
        - $ref: '#/parameters/PaginationLimit'
        - $ref: '#/parameters/PaginationOffset'
      responses:
        200:
          description: Returns value for a given merchant code and setting key.
          schema:
            type: object
            properties:
              externalServiceSettings:
                $ref: '#/definitions/ExternalServiceSettings'
        404:
          description: Merchant not found.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /merchants/{merchantCode}/externalServiceSettings/{key}:
    parameters:
      - $ref: '#/parameters/MerchantCode'
      - name: key
        in: path
        type: string
        required: true
        description: The key of the setting to be retrieved, e.g. "DefaultLocale".
    get:
      responses:
        200:
          description: Returns value for a given merchant code and setting key.
          schema:
            type: object
            properties:
              externalServiceSetting:
                description: The setting's value, e.g. a locale code for key "DefaultLocale".
                type: string
                example: "en-us"
        404:
          description: Merchant not found.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /merchants/{merchantCode}/shops:
    parameters:
      - $ref: '#/parameters/MerchantCode'
    get:
      tags:
        - Shop
      description: Get a list of shops, filterable by ID or code.
      parameters:
        - name: filters
          in: query
          type: string
          format: json
          description: Filter to filter settings by id, code
        - name: includeInternalIds
          in: query
          type: boolean
          description: Internal parameter, true to have the response also include the internal shop IDs
        - $ref: '#/parameters/PaginationLimit'
        - $ref: '#/parameters/PaginationOffset'
      responses:
        200:
          description: List of (filtered) shops.
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Pagination'
              shops:
                type: array
                items:
                  $ref: '#/definitions/GetShop'
        404:
          description: Merchant not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Shop
      description: Add a list of shops.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - shops
            properties:
              shops:
                type: array
                items:
                  $ref: '#/definitions/CreateShop'
      responses:
        201:
          description: 'Shop created'
          schema:
            type: object
            properties:
              errors:
                $ref: '#/definitions/BatchErrors'
        400:
          description: Bad request (mostly missing or invalid parameters/values)
          schema:
            $ref: '#/definitions/ValidationErrors'
        404:
          description: Merchant not found; catalog for a shop not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /merchants/{merchantCode}/shops/{shopCode}:
    parameters:
      - $ref: '#/parameters/MerchantCode'
      - $ref: '#/parameters/ShopCode'
    get:
      tags:
        - Shop
      description: Get a single shop by its code
      responses:
        200:
          description: The requested shop
          schema:
            $ref: '#/definitions/GetShop'
        404:
          description: 'Merchant or shop not found'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Shop
      description: Update a shop's properties
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/UpdateShop'
      responses:
        204:
          description: 'Shop updated'
        404:
          description: 'Merchant, shop or catalog not found'
        default:
          description: 'Unexpected error'
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Shop
      description: Delete a shop
      responses:
        204:
          description: 'Shop deleted'
        404:
          description: 'Merchant or shop not found'
        default:
          description: 'Unexpected error'
          schema:
            $ref: '#/definitions/Error'

  /merchants/{merchantCode}/shops/{shopCode}/id:
    parameters:
      - $ref: '#/parameters/MerchantCode'
      - $ref: '#/parameters/ShopCode'
    get:
      tags:
        - Internal
      description: Get the shop ID and merchant ID
      responses:
        200:
          description: The requested shop
          schema:
            type: object
            properties:
              shopId:
                type: number
                example: 536
              merchantId:
                type: string
                example: c078aa0e-7476-11ea-9d87-c34cdfe2a1a4
        404:
          description: 'Merchant or shop not found'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /merchants/{merchantCode}/shops/{shopCode}/settings:
    parameters:
      - $ref: '#/parameters/MerchantCode'
      - $ref: '#/parameters/ShopCode'
    get:
      tags:
        - Shop
      parameters:
        - in: query
          name: filters
          description: Filter to filter settings by key
          format: json
          type: string
      responses:
        200:
          description: Returns value for a given merchant code and setting key.
          schema:
            type: object
            properties:
              settings:
                $ref: '#/definitions/ShopSettings'
        404:
          description: Merchant or shop not found.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Shop
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - settings
            properties:
              settings:
                $ref: '#/definitions/ShopSettings'
      responses:
        204:
          description: Set merchant settings.
  /merchants/{merchantCode}/shops/{shopCode}/settings/{key}:
    parameters:
      - $ref: '#/parameters/MerchantCode'
      - $ref: '#/parameters/ShopCode'
      - name: key
        in: path
        type: string
        required: true
        description: The key of the setting to be retrieved, e.g. "DefaultLocale".
    get:
      tags:
        - Shop
      responses:
        200:
          description: Returns value for a given merchant code, shop code and setting key.
          schema:
            type: object
            properties:
              setting:
                description: The setting's value, e.g. a locale code for key "DefaultLocale".
                type: string
                example: "en-us"
        404:
          description: Merchant or shop not found.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /merchants/{merchantCode}/shops/{shopCode}/jwt:
    parameters:
      - $ref: '#/parameters/MerchantCode'
      - $ref: '#/parameters/ShopCode'
    get:
      tags:
        - Internal
      description: Get a JWT to login to the old backend
      responses:
        200:
          description: JWT payload
          schema:
            type: object
            properties:
              jwt:
                type: string
                example: 'abc123'
        404:
          description: 'Merchant or shop not found'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /merchants/{merchantCode}/logo:
    parameters:
      - $ref: '#/parameters/MerchantCode'
    post:
      description: Uploads an image for the merchant app logo.
      tags:
        - Design
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
          required: true
          description: The file to upload.
      responses:
        204:
          description: upload successful
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/ValidationError'
        404:
          description: Merchant not found
          schema:
            $ref: '#/definitions/Error'

  /merchants/{merchantCode}/shops/{shopCode}/designValues:
    parameters:
      - $ref: '#/parameters/MerchantCode'
      - $ref: '#/parameters/ShopCode'
    get:
      tags:
        - Design
      description: Get a list of key/value pairs for the specified design scope.
      responses:
        200:
          description: Object with design key/value pairs.
          schema:
            type: object
            properties:
              designValues:
                $ref: '#/definitions/DesignValues'
        404:
          description: Merchant or shop not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Design
      description: Update design values
      parameters:
        - in: body
          name: body
          required: true
          description: The values to update
          schema:
            type: object
            required:
              - designValues
            properties:
              designValues:
                $ref: '#/definitions/DesignValues'
      responses:
        204:
          description: 'Values updated'
        404:
          description: 'Merchant or shop not found'
        default:
          description: 'Unexpected error'
          schema:
            $ref: '#/definitions/Error'

  /merchants/{merchantCode}/shops/{shopCode}/images/{imageType}:
    parameters:
      - $ref: '#/parameters/MerchantCode'
      - $ref: '#/parameters/ShopCode'
      - name: imageType
        in: path
        type: string
        required: true
        enum:
          - logo
          - productPlaceholder
          - categoryPlaceholder
          - favicon
    get:
      description: Returns the image url
      tags:
        - Design
      responses:
        200:
          description: Image url
          schema:
            type: object
            properties:
              url:
                type: string
                example: 'http://foo.bar/baz.png'
        404:
          description: Image not found
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Uploads an image.
      tags:
        - Design
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
          required: true
          description: The file to upload.
      responses:
        204:
          description: upload successful
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/ValidationError'
        404:
          description: Shop not found
          schema:
            $ref: '#/definitions/Error'

  /shops:
    get:
      tags:
        - Internal
      description: Get a list of shops, filterable by websiteCName.
      parameters:
        - name: filters
          in: query
          type: string
          format: json
          description: Filter to filter settings by id, code
        - name: includeInternalIds
          in: query
          type: boolean
          description: Internal parameter, true to have the response also include the internal shop IDs
        - $ref: '#/parameters/PaginationLimit'
        - $ref: '#/parameters/PaginationOffset'
      responses:
        200:
          description: List of (filtered) shops.
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Pagination'
              shops:
                type: array
                items:
                  $ref: '#/definitions/GetShop'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

parameters:
  MerchantCode:
    name: merchantCode
    in: path
    type: string
    required: true
  ShopCode:
    name: shopCode
    in: path
    type: string
    required: true
  PaginationLimit:
    description: The limit of entries of one page.
    in: query
    name: limit
    type: integer
    default: 100
  PaginationOffset:
    description: The offset where to start the page.
    in: query
    name: offset
    type: integer
    default: 0
definitions:
  PostMerchant:
    type: object
    additionalProperties: false
    properties:
      name:
        type: string
        description: Name of the merchant.
        example: Awesome Merchant
      region:
        type: string
        description: Region of the merchant.
        example: US
      appLogo:
        type:
          - string
          - "null"
        description: App logo of the merchant.
        example: https://myAwesomeShop.com/app.png
      isDemo:
        type: boolean
        description: Indicates if the merchant is a demo merchant.
      status:
        type: string
        description: Indicates if the merchant is active.
        enum:
          - active
          - inactive
  Merchant:
    type: object
    additionalProperties: false
    properties:
      code:
        type: string
        description: Code of the merchant.
      name:
        type: string
        description: Name of the merchant.
        example: Awesome Merchant
      region:
        type: string
        description: Region of the merchant.
        example: US
      status:
        type: string
        description: Indicates if the merchant is active.
        enum:
          - active
          - inactive
        default: active
      entitlements:
        type: array
        description: List of permissions available on the merchant
        example: ['Fulfillment']
        items:
          type: string
      appLogo:
        type:
          - string
          - "null"
        description: App logo of the merchant.
        example: https://myAwesomeShop.com/app.png
      isDemo:
        type: boolean
        description: Indicates if the merchant is a demo merchant.
  MerchantSettings:
    type: object
    additionalProperties: false
    properties:
      defaultCurrency:
        type: string
        default: USD
        example: USD
      defaultTimezone:
        type: string
        default: America/Chicago
        description: Default timezone of the merchant. The value has to be an entry of the tz database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
        example: Europe/Berlin
      defaultLocale:
        type: string
        default: en-us
        example: en-us
      defaultUnitSystem:
        type: string
        enum:
          - metric
          - imperial
        default: metric
        example: metric
        description: Uniti system in which distance is measured (metric = km, imperial = miles)
      locationSearchRadius:
        type: number
        maximum: 9999
        default: 100
        example: 20.5
      locationSortOrder:
        type: string
        enum:
          - closestLocation
          - closestLocationWithInventory
        default: closestLocation
        example: closestLocation
      numberOfDisplayLocations:
        type: number
        default: 100
        example: 50
      hideLocationsWithoutInventory:
        type: boolean
        default: false
        example: false
      hideProductInventory:
        type: boolean
        default: true
        example: true
      locationBasedShoppingEnabled:
        type: boolean
        default: false
        example: false
      restrictMultiLocationOrders:
        type: boolean
        default: false
        example: false
        description: Controls if a customer can order items from more than one location.
      POSOrderNumberRequired:
        type: boolean
        default: false
        example: false
      notesOnCancelRequired:
        type: boolean
        default: false
        example: false
      notesOnRejectRequired:
        type: boolean
        default: false
        example: false
      productValidationOnOrderPlacement:
        type: boolean
        description: Private setting to turn off if line items should be validated at the time of SO placement
        default: true
        example: true
      pickupReminderTriggerAfterSeconds:
        type: ["number", "null"]
        example: 604800
        description: Time after which pickup reminder should be sent for an order (FO). In example 7 days (604800 seconds). Null value means never.
      automaticOrderCancellationEnabled:
        type: boolean
        example: true
        default: false
        description: Enables the automatic order cancellation. Orders will be cancelled after the time set in the setting "cancelOrderAfterSeconds"
      cancelOrderAfterSeconds:
        type: ["number", "null"]
        example: 259200
        description: Time after which order will be cancelled. In example 3 days (259200 seconds). Null value means never.
      automaticReservationCancellationEnabled:
        type: boolean
        example: true
        default: false
        description: Enables the automatic reservation cancellation. Reservations will be cancelled after the time set in the setting "cancelReservationAfterSeconds"
      cancelReservationAfterSeconds:
        type: ["number", "null"]
        example: 259200
        description: Time after which a reservation will be cancelled. In example 3 days (259200 seconds). Null value means never.
      enabledFulfillmentMethods:
        type: array
        items:
          type: string
          enum:
            - directShip
            - ROPIS
            - BOPIS
      enabledFulfillmentMethodSelectionForWebStorefront:
        type: array
        items:
          type: string
          enum:
            - quickReserve
            - multiLineReserve
      enabledFulfillmentMethodSelectionForEngage:
        type: array
        items:
          type: string
          enum:
            - quickReserve
            - multiLineReserve
      enableSubstitutionPreferences:
        type: boolean
        default: true
        description: Defines if shoppers are allowed to set substitution preferences for themselves.
      enableWebIndexing:
        type: boolean
        example: false
        description: Controls if indexing for 3rd party search engines is enabled.
      showCheckInPrompt:
        type: boolean
        example: true
        description: Controls if check in prompt should be shown in Deliver app.
      defaultFulfillmentMethods:
        type: array
        items:
          type: string
          enum:
            - directShip
            - ROPIS
            - BOPIS
      productVisibilityFulfillmentMethods:
        type: ["array", "null"]
        items:
          type: string
          enum:
            - directShip
            - ROPIS
            - BOPIS
      fulfillmentEmailNotificationsEnabled:
        type: boolean
        default: false
      enableExtCatalogImageImport:
        type: boolean
        default: false
      enableFulfillmentScheduling:
        type: boolean
        default: false
      hideBusyFulfillmentTimeSlots:
        type: boolean
        description: Hides all fulfillment time slots which are already busy.
        default: false
      scheduledPickupReminderBeforePickupSeconds:
        type: ["number", "null"]
        description: Time before the scheduled pickup to send a reminder to the customer. In example 1 hour (3600 seconds). Null value means never.
      productListShowInventory:
        type: boolean
        default: false
        example: false
      productShowAlternativeLocation:
        type: boolean
        default: false
        example: false
      manualPickMode:
        type: string
        default: normal
        enum:
          - normal
          - hidden
          - prohibited
      enforceSingleLineItemsScanning:
        type: boolean
        default: false
        example: false
      showCompareButtonInProductList:
        type: boolean
        default: false
        example: false
      inventoryReservationStrategy:
        type: string
        default: hardAllocate
        enum:
          - ignore
          - recommend
          - hardAllocate
      automaticReturnLabelCreationEnabled:
        type: boolean
        example: true
        default: false
        description: Enables the automatic creation of return labels.
      returnLabelToAddressMode:
        type: string
        example: default
        enum:
            - default
            - primaryStoreAddress
        description: Sets the return labels 'to' Address.
  DesignValues:
    type: object
    additionalProperties: false
    properties:
      color-background-accent:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-background-gutter-body:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-background-gutter-header:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-primary:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-secondary:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-state-alert:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-state-ok:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-state-warning:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-text-high-emphasis:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-text-low-emphasis:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      color-text-medium-emphasis:
        type: string
        example: '#ffffff'
        pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"

  ExternalServiceSettings:
    type: object
    additionalProperties: false
    properties:
      kwikeeKey:
        type: string
        default: ''
        example: 'secret-123'
      kwikeeImportFields:
        type: ["array", "null"]
        items:
          type: string
          enum:
            - name
            - description
            - media

  Shop:
    additionalProperties: false
    properties:
      name:
        type: string
        example: Downtown Austin
      logoUrl:
        type: string
        example: 'https://some-url/logo.png'
      locales:
        type: array
        description: The list of supported locales for a shop, specified by ISO 639-1 and ISO 3166-1 codes
        example: ['en-us', 'fr-fr', 'de-de']
        items:
          type: string
      currencies:
        type: array
        description: The list supported currencies for a shop, specified by ISO 4217 codes
        example: ['USD', 'EUR']
        items:
          type: string
      catalogCode:
        type: string
        description: The catalog to use for this shop.
        example: 'tx_retail'
      websiteCname:
        type: string
        description: cname of the shop
        example: 'fusion'
      websiteCustomDomain:
        type: string
        pattern: ^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$
        description: cname of the shop
        example: 'myawesomeshop.com'
      primaryWebsiteFQDN:
        type: string
        description: FQDN of the shop
        example: 'myawesomeshop.curbside.shopgate.com'

  GetShop:
    allOf:
      - type: object
        properties:
          code:
            type: string
            example: tx_austin_dt
      - $ref: '#/definitions/Shop'

  CreateShop:
    type: object
    additionalProperties: false
    required:
      - code
      - name
      - locales
      - currencies
      - catalogCode
    properties:
      code:
        type: string
        example: tx_austin_dt
      name:
        type: string
        example: Downtown Austin
      logoUrl:
        type: string
        example: 'https://some-url/logo.png'
      locales:
        type: array
        description: The list of supported locales for a shop, specified by ISO 639-1 and ISO 3166-1 codes
        example: ['en-us', 'fr-fr', 'de-de']
        items:
          type: string
      currencies:
        type: array
        description: The list supported currencies for a shop, specified by ISO 4217 codes
        example: ['USD', 'EUR']
        items:
          type: string
      catalogCode:
        type: string
        description: The catalog to use for this shop.
        example: 'tx_retail'
      websiteCname:
        type: string
        description: cname of the shop
        example: 'fusion'
      websiteCustomDomain:
        type: string
        pattern: ^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$
        description: cname of the shop
        example: 'myawesomeshop.com'

  UpdateShop:
    $ref: '#/definitions/Shop'

  ShopSettings:
    type: object
    additionalProperties: false
    properties:
      cartSupplementalContent:
        type: string
        example: Cart supplemental text
        description: Addtional text that is displayed on the cart page.
      orderSupplementalContent:
        type: string
        example: Order supplemental text
        description: Addtional text that is displayed in the checkout and on the order confirmation page.
      useGoInterface:
        type: boolean
        example: false
        description: Does this shop use the go interface?
      useVAT:
        type: boolean
        example: false
        description: Does this shop use the VAT System for taxes?
      showShopLogoInApp:
        type: boolean
        default: true
        description: Should the shop logo be shown in the app?
      showShopLogoInWeb:
        type: boolean
        default: true
        description: Should the shop logo be shown in the web?
      orderStatusSubmittedContent:
        type: string
        description: Order status message for status "Submitted".
      orderStatusInProgressContent:
        type: string
        description: Order status message for status "In Progress".
      orderStatusReadyContent:
        type: string
        description: Order status message for status "Ready".
      orderStatusCompletedContent:
        type: string
        description: Order status message for status "Completed".
      orderStatusCanceledContent:
        type: string
        description: Order status message for status "Canceled".
      productsSortOrder:
        type: string
        enum:
          - name:asc
          - name:desc
          - price:asc
          - price:desc
          - rank:asc
          - rank:desc
        description: Sort order for products in any category or search.
      defaultWishlistName:
        type: string
        default: Wishlist
        example: Wishlist
      wishlistMode:
        type: string
        default: persistOnAdd
        enum:
          - persistOnAdd
          - deleteOnAdd
        description: When item from the wishlist is added to the cart, whishlist keeps(persistOnAdd) or deletes(deleteOnAdd) the item.
      cookieConsentMode:
        type: string
        default: "off"
        enum:
          - "off"
          - standard
          - strict
        description: Specifies mode for cookie consent for the shop
      displayPricePerMeasureUnit:
        type: boolean
        default: false
        description: Specifies whether the quantity is specified in pieces or the product's measuring unit
      cartReminderTriggerAfterSeconds:
        type: ["number", "null"]
        example: 604800
        description: Time after which cart reminder should be sent for an abandoned cart. In example 7 days (604800 seconds). Null value means never.
      inactiveDeviceTriggerAfterSeconds:
        type: ["number", "null"]
        example: 604800
        description: Time after which inactive device event should be sent. In example 7 days (604800 seconds). Null value means never.
      numberOfAddressLines:
        type: [ "number" ]
        minimum: 1
        maximum: 4
        default: 2
        example: 4
        description: The number of address lines a customer should be able to enter. Must be between 1 and 4.
      termsPageUrl:
        type: string
        example: https://retail.red/agb
        description: URL to the shops terms and conditions page.
      privacyPolicyPageUrl:
        type: string
        example: https://retail.red/datenschutz
        description: URL to the shops privacy policy page.
      googleSiteVerificationCode:
        type: string
        example: YPAI1VbYDUQUj8pRzkUUD4zGRokUjgSD6GKMzXVmY3p
      showCategoryImages:
        type: boolean
        example: false
        default: false

  DesignValue:
    additionalProperties: false
    properties:
      key:
        type: string
        example: primary_color
      value:
        type: string
        example: '#0000ff'

  UpdateDesignValue:
    additionalProperties: false
    properties:
      value:
        type: string
        example: '#0000ff'

  ValidationError:
    type: object
    required:
      - field
      - code
      - message
    properties:
      field:
        type: string
        description: The parameter-field, that failed to validate, like "shopNumber".
      value:
        type: string
        description: The value, that was sent, like "xxx".
      code:
        type: string
        description: Machine readable error code.
        enum:
          - ENUM_MISMATCH
          - MAXIMUM
          - MAXIMUM_EXCLUSIVE
          - MINIMUM
          - MINIMUM_EXCLUSIVE
          - MULTIPLE_OF
          - ARRAY_LENGTH_LONG
          - ARRAY_LENGTH_SHORT
          - ARRAY_ADDITIONAL_ITEMS
          - ARRAY_UNIQUE
          - MAX_LENGTH
          - MIN_LENGTH
          - MAX_PROPERTIES
          - MIN_PROPERTIES
          - OBJECT_MISSING_REQUIRED_PROPERTY
          - OBJECT_PROPERTIES_MAXIMUM
          - OBJECT_PROPERTIES_MINIMUM
          - OBJECT_ADDITIONAL_PROPERTIES
          - OBJECT_DEPENDENCY_KEY
          - ONE_OF_MISSING
          - ONE_OF_MULTIPLE
          - NOT_PASSED
          - INVALID_FORMAT
          - UNKNOWN_FORMAT
          - PATTERN
      message:
        type: string
        description: Human readable error code.
  ValidationErrors:
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/ValidationError'
  Error:
    type: object
    required:
      - message
    properties:
      code:
        type: string
        description: Machine readable error code.
      message:
        type: string
        description: Human readable error code.

  BatchErrors:
    type: array
    items:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        validationError:
          type: object
          description: (optional) The original validation error that occured.
          properties:
            code:
              type: string
            message:
              type: string
            paramName:
              type: string
            paramValue:
              type: string
        entity:
          type: string
        entityIndex:
          type: number
          description: The index of the element the error refers to in the list of elements passed, starting from 0.
        entityId:
          type: string
    example:
      - code: 409
        message: Shop already exists
        entity: shop
        entityIndex: 0
        entityId: c9589a04-727c-11ea-bcaf-e7bb2ad1e960
      - code: 400
        message: Validation error
        validationError:
          code: INVALID_TYPE
          message: "Request validation failed: Parameter (externalUpdateDate) at index 1 is not a valid date: today"
          paramName: externalUpdateDate
          paramValue: today
        entity: shop
        entityIndex: 1
        entityId: null

  Pagination:
    type: object
    properties:
      limit:
        type: number
      offset:
        type: number
      totalItemCount:
        type: number
